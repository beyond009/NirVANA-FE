/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LibDAOInterface extends utils.Interface {
  functions: {};

  events: {
    "ProposalAdded(uint256,string)": EventFragment;
    "ProposalExecuted(uint256,uint256)": EventFragment;
    "Voted(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export interface ProposalAddedEventObject {
  proposalId: BigNumber;
  description: string;
}
export type ProposalAddedEvent = TypedEvent<
  [BigNumber, string],
  ProposalAddedEventObject
>;

export type ProposalAddedEventFilter = TypedEventFilter<ProposalAddedEvent>;

export interface ProposalExecutedEventObject {
  proposalId: BigNumber;
  votes: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface VotedEventObject {
  proposalId: BigNumber;
  voter: string;
}
export type VotedEvent = TypedEvent<[BigNumber, string], VotedEventObject>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface LibDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibDAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ProposalAdded(uint256,string)"(
      proposalId?: null,
      description?: null
    ): ProposalAddedEventFilter;
    ProposalAdded(
      proposalId?: null,
      description?: null
    ): ProposalAddedEventFilter;

    "ProposalExecuted(uint256,uint256)"(
      proposalId?: null,
      votes?: null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      proposalId?: null,
      votes?: null
    ): ProposalExecutedEventFilter;

    "Voted(uint256,address)"(proposalId?: null, voter?: null): VotedEventFilter;
    Voted(proposalId?: null, voter?: null): VotedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
